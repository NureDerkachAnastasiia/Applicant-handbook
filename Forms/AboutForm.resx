<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="menuStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="label12.Text" xml:space="preserve">
    <value>Збережену спеціальність або виш можна знайти, повернувшись на головну сторінку.
У правому верхньому кутку головної сторінки розташована кнопка "Збережене". 
Якщо на неї натиснути, то відкриється сторінка. Вона має дві вкладки: "Збережені ЗВО" 
та "Збережені спеціальності". 

У першій вкладці знаходиться таблиця зі збереженими 
вишами. Над таблицею розташовані кнопки "Видалити" та "Видалити все". Щоб
видалити зі списку один університет, треба натиснути на нього один раз, а потім
натиснути на кнопку "Видалити". Щоб повністю очистити список, треба натиснути
на кнопку "Видалити все". На екрані з'явиться вікно з питанням "Ви впевнені, що
хочете видалити все?". Якщо натиснути на "ОК", то список очиститься, якщо натиснути 
на "Cancel" то операція видалення відмінеться. При натисканні на обраний виш два
рази, відкриється сторінка з інформацією про цей виш. За допомогою кнопки "Назад"
можна повернутися на попередню сторінку.

У вкладці "Збережені спеціальності" знаходиться список спеціальностей, які зберіг
користувач. Над списком також є дві кнопки "Видалити" та "Видалити все", які працюють
за таким самим принципом, що аналогічні кнопки на попередній вкладці. Знизу сторінки
можна знайти елементи для сортування списку, що працюють за таким самим принципом,
що і на головній сторінці.
</value>
  </data>
  <data name="label10.Text" xml:space="preserve">
    <value>Перейшовши на сторінку з інформацією про конкретний університет або конкретну
спеціальність, на сторінці можна буде знайти кнопку "Зберегти". При натисканні цієї
кнопки обраний виш або обрана спеціальність додаються до списку збереженого.</value>
  </data>
  <data name="label8.Text" xml:space="preserve">
    <value>Перейшовши на вкладку "Пошук спеціальностей" на головній сторінці програми, можна
скористуватися пошуком спеціальностей. Для цього можна ввести усі потрібні дані у поля
вводу та натиснути кнопку "Шукати". Знайдені спеціальності з'являться нижче у табличці.
У самому низу сторінки знаходяться елементи сортування. Якщо вибрати необхідний 
критерій сортування та натиснути кнопку "Сортувати", знайдені спеціальності відсортуються
у заданому порядку. Натиснувши на одну із спеціальностей, користувачу відкриється
сторінка з інформацією про вибрану спеціальність. Повернутись на попередню сторінку
можна за допомогою кнопки "Назад".

Зверніть увагу, що сортування відбувається у порядку зростання (від меншого значення до
більшого). У випадку сортування спеціальностей за прохідним балом минулого року на
бюджет у списку можуть бути присутні спеціальності, що не мають такого балу (не мають
можливості вступу на бюджет). У такому випадку спеціальності без прохідного балу будуть
знаходитися у кінці списка.</value>
  </data>
  <data name="label6.Text" xml:space="preserve">
    <value>На наступній сторінці користувач побачить список університетів, які знайшла йому 
програма. Натискаючи на потрібний виш, користувач бачить вікно з інформацією
про нього. Нижче буде розташований список спеціальностей. Натиснувши на 
одну з них, можна побачити сторінку з інформацією про цю спеціальність. 
За допомогою кнопки "Назад" можна повернутись на попередню сторінку.
</value>
  </data>
  <data name="label5.Text" xml:space="preserve">
    <value>На головній сторінці програми у вкладці "Пошук університетів" користувач має змогу 
здійснити пошук по базі університетів вводячи потрібну інформацію у поля пошуку та 
натискаючи кнопку "Шукати" або просто натискаючи на назву потрібної області України.</value>
  </data>
  <data name="label2.Text" xml:space="preserve">
    <value>    Метою створення цієї програми є забезпечення вступників до закладів вищої освіти (ЗВО) 
зручним інструментом для пошуку актуальної інформації про існуючі ЗВО та спеціальності.
"Довідник абітурієнта" надає змогу використовувати обширну базу ЗВО та спеціальностей, а
також використовувати різні інструменти пошуку та сортування.</value>
  </data>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>25</value>
  </metadata>
</root>